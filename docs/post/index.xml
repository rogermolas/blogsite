<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Roger Molas</title>
    <link>https://rogermolas.github.io/blogsite/post/</link>
    <description>Recent content in Posts on Roger Molas</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>contact@rogermolas.com (Roger Molas)</managingEditor>
    <webMaster>contact@rogermolas.com (Roger Molas)</webMaster>
    <lastBuildDate>Fri, 09 Dec 2016 10:43:00 +0000</lastBuildDate>
    
	<atom:link href="https://rogermolas.github.io/blogsite/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grand Central Dispatch and Swift 3</title>
      <link>https://rogermolas.github.io/blogsite/post/grand-central-dispatch-and-swift-3/</link>
      <pubDate>Fri, 09 Dec 2016 10:43:00 +0000</pubDate>
      <author>contact@rogermolas.com (Roger Molas)</author>
      <guid>https://rogermolas.github.io/blogsite/post/grand-central-dispatch-and-swift-3/</guid>
      <description>Grand Central Dispatch (GCD or libdispatch) a system level library for managing concurrent operations develop by Apple Inc., it is one of the more complicated and unfriendly APIs in iOS SDK. It was written in C programming language using this API felts like writing low-level C code that executed directly into hardware.
GCD or libdispatch is a combination of logic in the xnu kernel alongside the user-space library. The kernel has the most information available to balance workload across the entire system.</description>
    </item>
    
    <item>
      <title>New iOS9 String Transformations API</title>
      <link>https://rogermolas.github.io/blogsite/post/new-ios9-string-transformations-api/</link>
      <pubDate>Mon, 29 Jun 2015 09:44:00 +0000</pubDate>
      <author>contact@rogermolas.com (Roger Molas)</author>
      <guid>https://rogermolas.github.io/blogsite/post/new-ios9-string-transformations-api/</guid>
      <description>String transformations formerly done using CFStringTransform a part of Core Foundation Framework. In iOS 9 string transformation can be done along with the new “NSStringTransform*” constants a native Cocoa API and no need to deal with bridging to CFStringRef.
Here are some of my favorite transformations that can be done with the new NSStringTransform* API.
print(&amp;quot;roger&amp;quot;.stringByApplyingTransform(NSStringTransformLatinToGreek, reverse: false)!) //ῤογερ print(&amp;quot;roger&amp;quot;.stringByApplyingTransform(NSStringTransformLatinToHangul, reverse: false)!) //로겔 print(&amp;quot;\uD83D\uDC2E&amp;quot;.stringByApplyingTransform(NSStringTransformToUnicodeName, reverse: false)!) //{COW FACE}  </description>
    </item>
    
    <item>
      <title>WatchKit Framework</title>
      <link>https://rogermolas.github.io/blogsite/post/watchkit-framework/</link>
      <pubDate>Wed, 13 May 2015 10:14:00 +0000</pubDate>
      <author>contact@rogermolas.com (Roger Molas)</author>
      <guid>https://rogermolas.github.io/blogsite/post/watchkit-framework/</guid>
      <description>WatchKit is the new framework created by Apple for Apple Watch development, WatchKit is available starting Xcode 6.2 and iOS 8.2.
Analogous to UIKit for iOS apps, the framework allows developers to drop in custom interfaces and interact with your existing iOS app.
When app is launched on Apple Watch, the WatchKit extension on iPhone runs in the background to update the user interface and respond to user interactions.</description>
    </item>
    
    <item>
      <title>iOS Dependency Management</title>
      <link>https://rogermolas.github.io/blogsite/post/ios-dependency-management/</link>
      <pubDate>Fri, 10 Apr 2015 06:00:00 +0000</pubDate>
      <author>contact@rogermolas.com (Roger Molas)</author>
      <guid>https://rogermolas.github.io/blogsite/post/ios-dependency-management/</guid>
      <description>As an iOS developer, you certainly use a third-party libraries or a source code made by others to extend your app’s abilities. At first, it seems easy, just drag and drop some source code or libraries in your Xcode project or drag and drop an entire subproject into the parent project and you are done.
Just imagine how difficult it would be if you had to implement everything from scratch!</description>
    </item>
    
  </channel>
</rss>